# import discord
# from discord.ext import commands
# import aiosqlite
# import datetime
# from random import randint as random

# class economy(commands.Cog):
#     def __init__(self, bot):
#         self.bot = bot

#     async def get_user_money(self, user_id):
#         async with aiosqlite.connect('economy.db') as conn:
#             cursor = await conn.execute('SELECT money FROM economy WHERE user_id = ?', (user_id,))
#             result = await cursor.fetchone()
#             return result[0] if result else None

#     async def update_user_money(self, user_id, money):
#         async with aiosqlite.connect('economy.db') as conn:
#             await conn.execute('INSERT INTO economy (user_id, money) VALUES (?,?) ON CONFLICT DO UPDATE SET money = ?', (user_id, money, money))
#             await conn.commit()
#     async def get_bank_info(self, user_id):
#         async with aiosqlite.connect('economy.db') as conn:
#             cursor = await conn.execute('SELECT balance, time FROM bank WHERE user_id = ?', (user_id,))
#             row = await cursor.fetchone()
#             return row

#     async def update_bank_info(self, user_id, balance, time=None):
#         async with aiosqlite.connect('economy.db') as conn:
#             time = time or datetime.datetime.utcnow().isoformat()

#             await conn.execute('INSERT OR REPLACE INTO bank (user_id, balance, time) VALUES (?, ?, ?)', (user_id, balance, time))
#             await conn.commit()


#     def format_timedelta(self, time):
#         time_datetime = datetime.datetime.fromisoformat(time)
#         delta = time_datetime - datetime.datetime.utcnow()

#         days = delta.days
#         hours, remainder = divmod(delta.seconds, 3600)
#         minutes, seconds = divmod(remainder, 60)

#         return {'days': days, 'hours': hours, 'minutes': minutes, 'seconds': seconds}
    
#     async def interest(self, user_id):
#         info = await self.get_bank_info(user_id) or [0, datetime.datetime.utcnow()]
#         balance = info[0] or 0
#         if balance == 0:
#             return 0, 0, 0
#         time = info[1]
#         hours = 0
#         old_balance = balance

#         while True:
#             delta = datetime.datetime.utcnow() - datetime.datetime.fromisoformat(time)
#             if delta.total_seconds() < 3600:
#                 break

#             balance *= 1.05
#             hours += 1
#             time = (datetime.datetime.fromisoformat(time) + datetime.timedelta(seconds=1)).isoformat()

#         return int(balance), int(old_balance), hours





    
#     @commands.group(name='economy', aliases=['eco'], invoke_without_command=True)
#     async def economy(self, ctx):
#         await ctx.send('Hi! Welcome to our economy bot! Use command \'help economy\' for more info.')

#     @economy.command(name='deposit')
#     @commands.cooldown(1, 5, commands.BucketType.user)
#     async def deposit(self, ctx, amount: int):
#         if amount <= 0:
#             await ctx.send('Amount must be more than 0!')
#             return
#         money = await self.get_user_money(ctx.author.id) or 0
        
#         if amount > money:
#             await ctx.send('You don\'t have enough money for this deposit!')
#             return
        
        
#         now, was, h = await self.interest(ctx.author.id)

#         now = now or 0
        
#         info = await self.get_bank_info(ctx.author.id)
#         await self.update_user_money(ctx.author.id, money-amount)
#         await self.update_bank_info(ctx.author.id, amount+info[0])

        

#         await ctx.send(f'Deposit successful!\nMoney in bank: {info[0]+amount}\nHours passed: {h}')


#     @economy.command(name='withdraw')
#     @commands.cooldown(1, 5, commands.BucketType.user)
#     async def withdraw(self, ctx, amount: int):
#         info = await self.get_bank_info(ctx.author.id)

#         if info is None or info[0] == 0:
#             await ctx.send('You have 0 balance!')
#             return

#         money = int(info[0])

#         if amount <= 0:
#             await ctx.send('Amount must be more than 0!')
#             return
#         if amount > money:
#             await ctx.send('That is too much for you!')
#             return
        
#         now, was, h = await self.interest(ctx.author.id)
#         await self.update_bank_info(ctx.author.id, now)

#         await self.update_bank_info(ctx.author.id, now - amount)
#         await self.update_user_money(ctx.author.id, money + amount)

#         await ctx.send(f'Your balance before withdraw: {money} money\n'
#                     f'Your balance after withdraw: {money + amount} money\n'
#                     f'Hours passed: {h}')


    
#     @economy.command(name='work', aliases=['job'])
#     @commands.cooldown(1, 3600, commands.BucketType.user)
#     async def work(self, ctx):
#         money_earned = 100
#         current_money = await self.get_user_money(ctx.author.id)
#         if current_money is None:
#             current_money = 0
#         await self.update_user_money(ctx.author.id, current_money + money_earned)

#         await ctx.send(f'{ctx.author.mention}, you have worked and earned {money_earned} money! Your total money is now {current_money + money_earned}.')

#     @economy.command(aliases=['tr'])
#     @commands.cooldown(1, 3600, commands.BucketType.user)
#     async def transfer(self, ctx, user: discord.Member, amount: int):
#         money = await self.get_user_money(ctx.author.id)
#         if money <= 0:
#             await ctx.send('Value must be more than 0!')
#             return
#         if money is None:
#             await ctx.send('You god no money!')
#             return
#         if money == 0:
#             await ctx.send('You have no money!')
#             return
#         if money < amount:
#             await ctx.send('You dont have that much money!')
#             return
        
        

#         await self.update_user_money(ctx.author.id, money-amount)
#         money_target = await self.get_user_money(user.id)
#         if money_target is None:
#             money_target = 0
#         await self.update_user_money(user.id, money_target+amount)


    
#     @economy.command(name='rob')
#     @commands.cooldown(1, 18000, commands.BucketType.user)
#     async def rob(self, ctx, member: discord.Member):
#         money = await self.get_user_money(ctx.author.id)
#         money_target = await self.get_user_money(member.id)

#         if money is None:
#             await ctx.send('You can\'t rob while your balance is none!')
#             return
#         if money < 500:
#             await ctx.send('Your balance must be 500+ to rob.')
#             return
#         if money_target is None:
#             await ctx.send('Target\'s balance is 0.')
#             return
#         if money_target < 500:
#             await ctx.send('Target\'s balance should be 500+ to rob.')
#             return

#         success_rate = random(1, 5)
#         if success_rate == 1:
#             stolen_amount = int(money_target * 0.35)
#             new_balance = money + stolen_amount
#             await self.update_user_money(ctx.author.id, new_balance)
#             await self.update_user_money(member.id, money_target - stolen_amount)
#             await ctx.send(f'{ctx.author.mention}, you successfully robbed {member.mention} and stole {stolen_amount} money! Your new balance is {new_balance}.')
#         else:
#             lost_amount = int(money * 0.2)
#             await self.update_user_money(ctx.author.id, money - lost_amount)
#             await ctx.send(f'{ctx.author.mention}, your attempted robbery on {member.mention} failed and you lost {lost_amount}. Better luck next time!')

#     @economy.command(name='set_balance', aliases=['sb', 'setb'])
#     async def set_balance(self, ctx, user: discord.Member, amount: int):
#         await self.update_user_money(user.id, amount)
#         await ctx.send('Done!')

#     @economy.command(name='balance', aliases=['bal', 'money'])
#     @commands.cooldown(1, 5, commands.BucketType.user)
#     async def balance(self, ctx, user: discord.Member = None):
#         user_id = user.id if user else ctx.author.id
#         current_balance = await self.get_user_money(user_id) or 0

#         info = await self.get_bank_info(user_id)
        
#         info = info or (0, datetime.datetime.utcnow())

#         now, was, h = await self.interest(ctx.author.id)

#         await self.update_bank_info(user_id, now)

#         await ctx.send(f'{ctx.author.mention}, {user.mention if user else "your"} current balance is {current_balance} money. Bank: {now}')






    
#     @economy.command(name='allornothing', aliases=['50/50'])
#     @commands.cooldown(1, 3600, commands.BucketType.user)
#     async def allornothing(self, ctx):
#         money = await self.get_user_money(ctx.author.id)
#         if money is None or money == 0:
#             await ctx.send('You must have more than 1 balance for this!')
#             return

#         x = random(1, 2)
#         if x == 1:
#             await self.update_user_money(ctx.author.id, money * 3)
#             await ctx.send(f'YOU WON! Your balance is now {money * 3}!!!')
#         else:
#             await self.update_user_money(ctx.author.id, 0)
#             await ctx.send(f'I\'m sorry to say... you lost all your balance. RIP {money}.')

#     @economy.command(name='bet')
#     @commands.cooldown(1, 120, commands.BucketType.user)
#     async def bet(self, ctx, amount: int):
#         money = await self.get_user_money(ctx.author.id)
#         if money is None or money == 0:
#             await ctx.send('You must have more than 1 balance for this!')
#             return
        
#         if money < amount:
#             await ctx.send('You dont have that much money!')
#             return
#         if amount > 10000:
#             await ctx.send('Maximum amount is 10k!')
#             return
#         if amount < 100:
#             await ctx.send('Bet should be more than 100 bucks!')
#             return
#         g = random(1,3)
#         if g == 3:
#             await self.update_user_money(ctx.author.id, money - amount)
#             await ctx.send(f'You lost! Your balance is {money-amount}')
#             return
#         await self.update_user_money(ctx.author.id, money + amount)
#         await ctx.send(f'You won, yor balance is {money+amount}.')



# async def setup(bot):
#     await bot.add_cog(economy(bot))